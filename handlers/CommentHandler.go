package handlers

import (
	"context"
	"log"
	"time"

	"go.mongodb.org/mongo-driver/mongo"
	tb "gopkg.in/tucnak/telebot.v2"
)

type Comments struct {
	Comment   string    `json:"comment"`
	ID        int       `json:"id"`
	FirstName string    `json:"first_name"`
	Username  string    `json:"username"`
	Time      time.Time `json:"date"`
}

//CommentHandle –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –±–∞–∑—É –æ—Ç–∑—ã–≤/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
func CommentHandle(b *tb.Bot, DB *mongo.Database) func(*tb.Message) {
	return func(msg *tb.Message) {
		WriteFlag := true
		if CheckAdmin(msg, DB) {
			b.Send(msg.Sender, "–° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º üòä")
			b.Handle(tb.OnText, func(m *tb.Message) {
				if WriteFlag {
					comment := Comments{
						Comment:   m.Text,
						ID:        m.Sender.ID,
						FirstName: m.Sender.FirstName,
						Username:  m.Sender.Username,
						Time:      m.Time().Add(time.Hour * 7)}

					collection := DB.Collection("Comments")
					_, err := collection.InsertOne(context.TODO(), comment)
					if err != nil {
						log.Println("–î—É–±–ª—å:\n", err)
					}
					WriteFlag = false
					b.Send(msg.Sender, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è üòò")
				}
			})
		} else {
			b.Send(msg.Sender, "–≠—Ç–æ —Ç–µ–±–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ :3")
		}
	}
}
